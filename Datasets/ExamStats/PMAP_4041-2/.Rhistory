dnorm(x,0,1)
x <- seq(-3, 3, length.out = 100)
curve(dnorm(x,0,1))
curve(x, dnorm(x,0,1))
?curve
curve(dnorm(x,0,1), from=-3, to=3)
curve(dnorm(x,0,1), from=-4, to=4)
x
curve(dnorm(x,0,1), from=-6, to=6)
curve(dnorm(x,0,1), from=-4, to=4)
dnorm(x,0,1)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
?curve
cord.x <- c(-3,seq(-3,-2,0.01),-2)
cord.y <- c(0,dnorm(seq(-3,-2,0.01)),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='skyblue')
xLow <- -2
xHigh <- -1
cord.x <- c(xLow,seq(-3,-2,0.01),xHigh)
cord.y <- c(0,dnorm(seq(-3,-2,0.01)),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='skyblue')
xLow <- -2
xHigh <- -1
cord.x <- c(xLow,seq(-3,-2,0.01),xHigh)
cord.y <- c(0,dnorm(seq(-3,-2,0.01)),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='skyblue')
xLow <- -2
xHigh <- -1
cord.x <- c(xLow,seq(-3,-2,0.01),xHigh)
cord.y <- c(0,dnorm(seq(-3,-2,0.01)),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='skyblue')
xLow <- -2
xHigh <- -1
cord.x <- c(xLow,seq(xLow,xHigh,0.01),xHigh)
cord.y <- c(0,dnorm(seq(-3,-2,0.01)),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='skyblue')
xLow <- -2
xHigh <- -1
cord.x <- c(xLow,seq(xLow,xHigh,0.01),xHigh)
cord.y <- c(0,dnorm(seq(xLow,xHigh,0.01)),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='skyblue')
xLow <- -2
xHigh <- -1
range <- seq(xLow,xHigh,0.01)
cord.x <- c(xLow, range, xHigh)
cord.y <- c(0,dnorm(range),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='skyblue')
?polygon
xLow <- -2
xHigh <- -1
range <- seq(xLow,xHigh,0.01)
cord.x <- c(xLow, range, xHigh)
cord.y <- c(0,dnorm(range),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='skyblue', border = NA)
xLow <- -2
xHigh <- -1
range <- seq(xLow,xHigh,0.01)
cord.x <- c(xLow, range, xHigh)
cord.y <- c(0,dnorm(range),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='skyblue', border = NA)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
#str(densf)
xLow <- -2
xHigh <- -1
range <- seq(xLow,xHigh,0.01)
cord.x <- c(xLow, range, xHigh)
cord.y <- c(0,dnorm(range),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='skyblue', border = NA)
xLow <- -2
xHigh <- -1
range <- seq(xLow,xHigh,0.01)
cord.x <- c(xLow, range, xHigh)
cord.y <- c(0,dnorm(range),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='grey30', border = NA)
xLow <- -2
xHigh <- -1
range <- seq(xLow,xHigh,0.01)
cord.x <- c(xLow, range, xHigh)
cord.y <- c(0,dnorm(range),0)
curve(dnorm(x,0,1),xlim=c(-3,3),main='Normal Density')
polygon(cord.x,cord.y,col='grey50', border = NA)
shiny::runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-hist')
shiny::runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-hist')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-hist')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-hist')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-hist')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-hist')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-hist')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-hist')
sliderInput("x6", "Observation 1:", min = 1, max = 10, value = 3),
sliderInput("x6", "Observation 1:", min = 1, max = 10, value = 3),
sliderInput("x6", "Observation 1:", min = 1, max = 10, value = 3),
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-NormalDistr')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-hist')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
abline(h=0)
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
runApp('C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/app-SensitivityToOutliers')
?scatterplot
library(car)
install.packages(car)
install.packages("car")
library(car)
?scatterplot
a <- 1
strength <- 5
x <- 1:20
y <- a*x
error <- rnorm(20, mean=0, sd=strenght)
scatterplot(x, y)
error
rnorm(20, mean=0, sd=strenght)
a <- 1
strength <- 5
x <- 1:20
y <- a*x
error <- rnorm(20, mean=0, sd=strength)
scatterplot(x, y)
error <- rnorm(20, mean=0, sd=strength)
error
a <- 1
strength <- 5
x <- 1:20
y <- a*x
error <- rnorm(20, mean=0, sd=strength)
y <- y + error
scatterplot(x, y)
plot(x, y)
?tcrossprod
n     <- 20                    # length of vector
rho   <- 0.6                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
x1    <- rnorm(n, 1, 1)        # fixed given data
x2    <- rnorm(n, 2, 0.5)      # new random data
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(y ~ x))
abline(lm(x ~ x1))
n     <- 20                    # length of vector
rho   <- 0.7                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
x1    <- rnorm(n, 1, 1)        # fixed given data
x2    <- rnorm(n, 2, 0.5)      # new random data
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
n     <- 20                    # length of vector
rho   <- 0.8                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
x1    <- rnorm(n, 1, 1)        # fixed given data
x2    <- rnorm(n, 2, 0.5)      # new random data
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
n     <- 20                    # length of vector
rho   <- 0.9                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
x1    <- rnorm(n, 1, 1)        # fixed given data
x2    <- rnorm(n, 2, 0.5)      # new random data
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
n     <- 20                    # length of vector
rho   <- 0.99                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
x1    <- rnorm(n, 1, 1)        # fixed given data
x2    <- rnorm(n, 2, 0.5)      # new random data
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
n     <- 20                    # length of vector
rho   <- 0.999                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
x1    <- rnorm(n, 1, 1)        # fixed given data
x2    <- rnorm(n, 2, 0.5)      # new random data
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
n     <- 20                    # length of vector
x1    <- rnorm(n, 1, 1)        # fixed given data
x2    <- rnorm(n, 2, 0.5)      # new random data
rho   <- 0.999                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.99                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.9                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.8                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.7                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.6                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.5                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.4                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.3                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.2                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.1                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- 0.0                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- -0.3                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
rho   <- -0.5                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
n     <- 20                    # length of vector
#x1    <- rnorm(n, 1, 1)        # fixed given data
#x2    <- rnorm(n, 2, 0.5)      # new random data
x1    <- rnorm(n, 10, 3)        # fixed given data
x2    <- rnorm(n, 10, 1)      # new random data
rho   <- -0.5                   # desired correlation = cos(angle)
theta <- acos(rho)             # corresponding angle
X     <- cbind(x1, x2)         # matrix
Xctr  <- scale(X, center=TRUE, scale=FALSE)   # centered columns (mean 0)
Id   <- diag(n)                               # identity matrix
Q    <- qr.Q(qr(Xctr[ , 1, drop=FALSE]))      # QR-decomposition, just matrix Q
P    <- tcrossprod(Q)          # = Q Q'       # projection onto space defined by x1
x2o  <- (Id-P) %*% Xctr[ , 2]                 # x2ctr made orthogonal to x1ctr
Xc2  <- cbind(Xctr[ , 1], x2o)                # bind to matrix
Y    <- Xc2 %*% diag(1/sqrt(colSums(Xc2^2)))  # scale columns to length 1
x <- Y[ , 2] + (1 / tan(theta)) * Y[ , 1]     # final new vector
cor(x1, x)
plot(x1, x)
abline(lm(x ~ x1))
?qr.Q
rnorm(17,6,2)
round(rnorm(17,6,2))
v <- round(rnorm(17,6,2))
hist(v)
v <- round(rnorm(17,6,2))
hist(v)
v
#setwd("C:/Users/admin/Dropbox/Programming---R/RWorkDir/PMAP_4041-2")   #HomePC DROPBOX
setwd("C:/Users/Yuriy/Dropbox/Programming---R/RWorkDir/PMAP_4041-2")   #WorkPC DROPBOX
#getwd()
#list.files()
grades <- read.csv("Grades.csv", header = TRUE)
#grades <- read.csv("Grades.csv", header = TRUE)
#Xbar <- mean(grades$Quiz3, na.rm = TRUE)
#M <- median(grades$Quiz3, na.rm = TRUE)
#table(grades$Quiz1)
# Midterm ############################################################################################
bins <- seq(from=0.5, to=102, by=1)
binslabels <- seq(from=0, to=102, by=1)
#hist(grades$Quiz5, xaxt="n", breaks = bins, ylim = c(0, 7), xlim = c(0, 10),  labels = FALSE, col="grey30", border="white", ylab="Counts", xlab="Quiz 3 Scores")
hist(grades$Midterm, xaxt="n", breaks = bins, xlim = c(0, 100),  labels = FALSE, col="grey30", border="white", ylab="Density", xlab="Quiz 5 Scores", prob=T)
lines(density(grades$Midterm, na.rm = TRUE), lwd=2, col = "red")
#abline(h=c(0:6), col="white", lwd=1)
axis( side=1, at=binslabels, labels=as.character(binslabels),  tcl=-0.5 )
#####################################################################################################
bins <- seq(from=0.5, to=102, by=2)
binslabels <- seq(from=0, to=102, by=1)
#hist(grades$Quiz5, xaxt="n", breaks = bins, ylim = c(0, 7), xlim = c(0, 10),  labels = FALSE, col="grey30", border="white", ylab="Counts", xlab="Quiz 3 Scores")
hist(grades$Midterm, xaxt="n", breaks = bins, xlim = c(0, 100),  labels = FALSE, col="grey30", border="white", ylab="Density", xlab="Quiz 5 Scores", prob=T)
lines(density(grades$Midterm, na.rm = TRUE), lwd=2, col = "red")
#abline(h=c(0:6), col="white", lwd=1)
axis( side=1, at=binslabels, labels=as.character(binslabels),  tcl=-0.5 )
#####################################################################################################
